name: 'Build, install and test Arcane Framework'

on:
  workflow_call:
    inputs:
      image:
        description: 'Docker image for the workflow'
        type: string
        required: true

      compilo_name:
        description: 'Compiler name (gcc, clang)'
        type: string
        required: false
        default: 'gcc'
      compilo_version:
        description: 'Compiler version (12, 16, ...)'
        type: string
        required: false
        default: ''
      mpi:
        description: 'MPI (OMPI, MPICH)'
        type: string
        required: false
        default: 'OMPI'
      acc_compilo_name:
        description: 'Accelerator compiler name (cuda, acpp, clang_cuda, rocm)'
        type: string
        required: false
        default: ''
      acc_compilo_version:
        description: 'Accelerator compiler version (125, 126, ...) or empty str'
        type: string
        required: false
        default: ''
      use_mold:
        description: 'Use mold linker ? (true/false/auto)'
        type: string
        required: false
        default: 'auto'
      type_build:
        description: 'Type of build (Debug, Check, Release)'
        type: string
        required: false
        default: 'Release'
      cmake_additionnal_args:
        description: 'Additionnal arguments for configure'
        type: string
        required: false
        default: ''
      verbose:
        description: 'Add verbose args for make/ninja'
        type: boolean
        required: false
        default: false
      ccache_debug_mode:
        description: 'Activate CCache debug mode'
        type: boolean
        required: false
        default: false
      with_samples:
        description: 'Compile samples too ? Require install_dir.'
        type: boolean
        required: false
        default: true
      with_rand_script:
        description: 'Disabling randomly selected packages ?'
        type: boolean
        required: false
        default: false

      execute_tests:
        description: 'Execute tests ?'
        type: boolean
        required: false
        default: true
      excluded_tests:
        description: 'Regex with exclude tests'
        type: string
        required: false
        default: ''
      excluded_tests_with_labels:
        description: 'Labels of exclude tests'
        type: string
        required: false
        default: ''
      ctest_additionnal_args:
        description: 'Additionnal arguments for testing'
        type: string
        required: false
        default: ''

      use_cache:
        description: 'Use cache ? (true/false)'
        type: string
        required: false
        default: 'true'
      cache_key_prefix:
        description: 'Cache key prefix'
        type: string
        required: false
        default: 'aio'
      artifact_key_prefix:
        description: 'Artifact key prefix'
        type: string
        required: false
        default: 'artifact'


env:
  # OpenMPI
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  # To tell OpenMPI we may use more processus than available cores
  OMPI_MCA_rmaps_base_oversubscribe : true

jobs:
  build-install-test:
    name: 'Build, install and test Arcane Framework'
    runs-on: ubuntu-latest
    container:
      image: ${{inputs.image}}

    steps:
      - name: Display CPU infos
        shell: bash
        run: |
          cat /proc/cpuinfo

      - name: Display disks infos
        shell: bash
        run: |
          df -h

      - name: Define environment paths
        shell: bash
        run: |
          echo "SOURCE_DIR=${GITHUB_WORKSPACE}/framework" >> $GITHUB_ENV
          echo "BUILD_DIR=${GITHUB_WORKSPACE}/build" >> $GITHUB_ENV
          echo "INSTALL_DIR=${GITHUB_WORKSPACE}/install" >> $GITHUB_ENV
          echo "LOG_DIR=${GITHUB_WORKSPACE}/log" >> $GITHUB_ENV
          echo "CT_RESULT_DIR=${GITHUB_WORKSPACE}/test" >> $GITHUB_ENV
          if [[ "${{ inputs.use_cache }}" == "true" ]]; then
            echo "CCACHE_DIR=${GITHUB_WORKSPACE}/ccache" >> $GITHUB_ENV
          else
            echo "CCACHE_DIR=" >> $GITHUB_ENV
          fi

      - name: Create paths
        shell: bash
        run: |
          mkdir ${{ env.SOURCE_DIR }} \
            ${{ env.BUILD_DIR }} \
            ${{ env.INSTALL_DIR }} \
            ${{ env.LOG_DIR }} \
            ${{ env.CT_RESULT_DIR }} 
          if [[ "${{ inputs.use_cache }}" == "true" ]]; then
            mkdir ${{ env.CCACHE_DIR }}
          fi

      - name: Set MPICH as default MPI
        if: "${{ inputs.mpi == 'MPICH' }}"
        shell: bash
        run: |
          source /root/scripts/use_mpich.sh

      - name: Set OpenMPI as default MPI
        if: "${{ inputs.mpi == 'OMPI' }}"
        shell: bash
        run: |
          source /root/scripts/use_openmpi.sh

      - name: Set C++ compiler
        shell: bash
        run: |
          if [[ "${{ inputs.compilo_version }}" == "" ]]; then
            source /root/scripts/use_${{inputs.compilo_name}}.sh
          else
            source /root/scripts/use_${{inputs.compilo_name}}-${{inputs.compilo_version}}.sh
          fi
          echo "AUTO_USE_MOLD=true" >> $GITHUB_ENV

      - name: Set accelerator compiler
        if: "${{ inputs.acc_compilo_name != '' }}"
        shell: bash
        run: |
          if [[ "${{ inputs.acc_compilo_name }}" == "cuda" ]]; then
            echo "ACC_COMPILER=nvcc" >> $GITHUB_ENV
            echo "AUTO_USE_MOLD=true" >> $GITHUB_ENV
            if [[ "${{ inputs.acc_compilo_version }}" == "" ]]; then
              source /root/scripts/use_cuda.sh
            else
              source /root/scripts/use_cuda-${{inputs.acc_compilo_version}}.sh
            fi
          elif [[ "${{ inputs.acc_compilo_name }}" == "clang_cuda" ]]; then
            echo "ACC_COMPILER=clang_cuda" >> $GITHUB_ENV
            echo "AUTO_USE_MOLD=false" >> $GITHUB_ENV
            if [[ "${{ inputs.acc_compilo_version }}" == "" ]]; then
              source /root/scripts/use_clang_cuda.sh
            else
              source /root/scripts/use_clang-${{inputs.acc_compilo_version}}_cuda.sh
            fi
          elif [[ "${{ inputs.acc_compilo_name }}" == "rocm" ]]; then
            echo "ACC_COMPILER=amdclang" >> $GITHUB_ENV
            echo "AUTO_USE_MOLD=false" >> $GITHUB_ENV
            echo "CMAKE_ADD_ARGS=${{ env.CMAKE_ADD_ARGS }} -DCMAKE_PREFIX_PATH=/opt/rocm" >> $GITHUB_ENV
            if [[ "${{ inputs.acc_compilo_version }}" == "" ]]; then
              source /root/scripts/use_rocm.sh
            else
              source /root/scripts/use_rocm-${{inputs.acc_compilo_version}}.sh
            fi
          elif [[ "${{ inputs.acc_compilo_name }}" == "acpp" ]]; then
            echo "ACC_COMPILER=acpp" >> $GITHUB_ENV
            echo "AUTO_USE_MOLD=true" >> $GITHUB_ENV
          fi

      - name: Set MOLD
        shell: bash
        run: |
          if [[ "${{ inputs.use_mold }}" == "auto" ]]; then
            echo "FINAL_USE_MOLD=${{ env.AUTO_USE_MOLD }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.use_mold }}" == "true" ]]; then
            echo "FINAL_USE_MOLD=true" >> $GITHUB_ENV
          else
            echo "FINAL_USE_MOLD=false" >> $GITHUB_ENV
          fi

      - name: Get date
        shell: bash
        run: |
          echo "m_date=$(/bin/date -u '+%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Get cache for ccache tool
        if: "${{ inputs.use_cache == 'true' }}"
        uses: actions/cache@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ${{ inputs.cache_key_prefix }}-${{ env.m_date }}-${{ github.run_number }}
          restore-keys: ${{ inputs.cache_key_prefix }}-

      - name: Checkout framework
        uses: actions/checkout@v4
        with:
          path: ${{ env.SOURCE_DIR }}
          submodules: true

      - name: Disabling randomly selected packages
        if: ${{ inputs.with_rand_script }}
        shell: bash
        run: |
          chmod u+x ${{ env.SOURCE_DIR }}/.github/scripts/rand_pkg.sh
          MRAND=$(${{ env.SOURCE_DIR }}/.github/scripts/rand_pkg.sh)
          echo "$MRAND"
          echo "M_RAND=$MRAND" >> $GITHUB_ENV

      - name: Display disks infos and size of directories
        shell: bash
        run: |
          df -h
          dum(){
            DIR="${1:-0}"
            CMDD=$(du -ahc --time --max-depth=1 "${DIR}")
            grep -E -- '$(echo "${CMDD}" | tail -n1)|$' <(echo "${CMDD}" | sort -h)
          }
          echo "::group::SOURCE_DIR :"
          dum "${{ env.SOURCE_DIR }}"
          echo "::endgroup::"
          echo "::group::BUILD_DIR :"
          dum "${{ env.BUILD_DIR }}"
          echo "::endgroup::"
          echo "::group::INSTALL_DIR :"
          dum "${{ env.INSTALL_DIR }}"
          echo "::endgroup::"
          echo "::group::LOG_DIR :"
          dum "${{ env.LOG_DIR }}"
          echo "::endgroup::"
          echo "::group::CT_RESULT_DIR :"
          dum "${{ env.CT_RESULT_DIR }}"
          echo "::endgroup::"
          if [[ "${{ inputs.use_cache }}" == "true" ]]; then
            echo "::group::CCACHE_DIR :"
            dum "${{ env.CCACHE_DIR }}"
            echo "::endgroup::"
          fi

      - name: Build and install framework
        uses: arcaneframework/gh_actions/build_install_framework@v3.1.0
        with:
          source_dir: ${{ env.SOURCE_DIR }}
          build_dir: ${{ env.BUILD_DIR }}
          install_dir: ${{ env.INSTALL_DIR }}
          log_dir: ${{ env.LOG_DIR }}
          cache_dir: ${{ env.CCACHE_DIR }}
          max_size_cache_dir: 1G
          ccache_debug_mode: ${{ inputs.ccache_debug_mode }}
          cmake_additionnal_args: '${{ env.CMAKE_ADD_ARGS }} ${{ inputs.cmake_additionnal_args }} ${{ env.M_RAND }}'
          verbose: ${{ inputs.verbose }}
          type_build: ${{ inputs.type_build }}
          use_mold: ${{ env.FINAL_USE_MOLD }}
          compilo: ${{ inputs.compilo_name }}
          acc_compilo: ${{ env.ACC_COMPILER }}
          with_samples: ${{ inputs.with_samples }}

      - name: Upload log artifact
        if: ${{ failure() || inputs.ccache_debug_mode == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_key_prefix }}-log_config_build-artifact
          path: ${{ env.LOG_DIR }}
          retention-days: 7

      - name: Display disks infos and size of directories
        shell: bash
        run: |
          df -h
          dum(){
            DIR="${1:-0}"
            CMDD=$(du -ahc --time --max-depth=1 "${DIR}")
            grep -E -- '$(echo "${CMDD}" | tail -n1)|$' <(echo "${CMDD}" | sort -h)
          }
          echo "::group::SOURCE_DIR :"
          dum "${{ env.SOURCE_DIR }}"
          echo "::endgroup::"
          echo "::group::BUILD_DIR :"
          dum "${{ env.BUILD_DIR }}"
          echo "::endgroup::"
          echo "::group::INSTALL_DIR :"
          dum "${{ env.INSTALL_DIR }}"
          echo "::endgroup::"
          echo "::group::LOG_DIR :"
          dum "${{ env.LOG_DIR }}"
          echo "::endgroup::"
          echo "::group::CT_RESULT_DIR :"
          dum "${{ env.CT_RESULT_DIR }}"
          echo "::endgroup::"
          if [[ "${{ inputs.use_cache }}" == "true" ]]; then
            echo "::group::CCACHE_DIR :"
            dum "${{ env.CCACHE_DIR }}"
            echo "::endgroup::"
          fi

      - name: Test
        if: ${{ inputs.execute_tests }}
        shell: bash
        run: |
          mkdir -p ${{ env.CT_RESULT_DIR }}
          ARCANE_CHECK=1 ctest --test-dir ${{ env.BUILD_DIR }} --output-junit ${{ env.CT_RESULT_DIR }}/results.xml  --output-on-failure -E '${{inputs.excluded_tests}}' -LE '${{inputs.excluded_tests_with_labels}}' ${{inputs.ctest_additionnal_args}}

      - name: Display disks infos and size of directories
        shell: bash
        run: |
          df -h
          dum(){
            DIR="${1:-0}"
            CMDD=$(du -ahc --time --max-depth=1 "${DIR}")
            grep -E -- '$(echo "${CMDD}" | tail -n1)|$' <(echo "${CMDD}" | sort -h)
          }
          echo "::group::SOURCE_DIR :"
          dum "${{ env.SOURCE_DIR }}"
          echo "::endgroup::"
          echo "::group::BUILD_DIR :"
          dum "${{ env.BUILD_DIR }}"
          echo "::endgroup::"
          echo "::group::INSTALL_DIR :"
          dum "${{ env.INSTALL_DIR }}"
          echo "::endgroup::"
          echo "::group::LOG_DIR :"
          dum "${{ env.LOG_DIR }}"
          echo "::endgroup::"
          echo "::group::CT_RESULT_DIR :"
          dum "${{ env.CT_RESULT_DIR }}"
          echo "::endgroup::"
          if [[ "${{ inputs.use_cache }}" == "true" ]]; then
            echo "::group::CCACHE_DIR :"
            dum "${{ env.CCACHE_DIR }}"
            echo "::endgroup::"
          fi

      - name: Upload test artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_key_prefix }}-test-artifact
          path: ${{ env.CT_RESULT_DIR }}
          retention-days: 7
