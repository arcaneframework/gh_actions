name: 'Build, install and test Arcane Framework'

on:
  workflow_call:
    inputs:
      image:
        description: 'Docker image for the workflow'
        type: string
        required: true

      compilo:
        description: 'Compiler (GCC, CLang)'
        type: string
        required: false
        default: 'GCC'
      mpi:
        description: 'MPI (OpenMPI, MPICH)'
        type: string
        required: false
        default: 'OpenMPI'
      with_cuda:
        description: 'Compile with CUDA too ?'
        type: boolean
        required: false
        default: false
      type_build:
        description: 'Type of build (Debug, Check, Release)'
        type: string
        required: false
        default: 'Release'
      cmake_additionnal_args:
        description: 'Additionnal arguments for configure'
        type: string
        required: false
        default: ''
      verbose:
        description: 'Add verbose args for make/ninja'
        type: boolean
        required: false
        default: false
      with_samples:
        description: 'Compile samples too ? Require install_dir.'
        type: boolean
        required: false
        default: true
      with_rand_script:
        description: 'Disabling randomly selected packages ?'
        type: boolean
        required: false
        default: false

      execute_tests:
        description: 'Execute tests ?'
        type: boolean
        required: false
        default: true
      excluded_tests:
        description: 'Regex with exclude tests'
        type: string
        required: false
        default: ''
      excluded_tests_with_labels:
        description: 'Labels of exclude tests'
        type: string
        required: false
        default: ''

      cache_key_prefix:
        description: 'Cache key prefix'
        type: string
        required: false
        default: 'aio'


env:
  # CTest
  CT_OPTS: "--timeout 1200 --output-on-failure"

  # OpenMPI
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  # To tell OpenMPI we may use more processus than available cores
  OMPI_MCA_rmaps_base_oversubscribe : true

jobs:
  build-install-test:
    name: 'Build, install and test Arcane Framework'
    runs-on: ubuntu-latest
    container:
      image: ${{inputs.image}}

    steps:
      - name: Define environment paths
        shell: bash
        run: |
          echo "SOURCE_DIR=${GITHUB_WORKSPACE}/framework" >> $GITHUB_ENV
          echo "BUILD_DIR=${GITHUB_WORKSPACE}/build" >> $GITHUB_ENV
          echo "INSTALL_DIR=${GITHUB_WORKSPACE}/install" >> $GITHUB_ENV
          echo "CCACHE_DIR=${GITHUB_WORKSPACE}/ccache" >> $GITHUB_ENV
          echo "LOG_DIR=${GITHUB_WORKSPACE}/log" >> $GITHUB_ENV
          echo "CT_RESULT_DIR=${GITHUB_WORKSPACE}/test" >> $GITHUB_ENV

      - name: Set MPICH as default MPI
        if: "${{ inputs.mpi == 'MPICH' }}"
        shell: bash
        run: |
          source /root/scripts/usefull_functions.sh
          use_mpich

      - name: Set OpenMPI as default MPI
        if: "${{ inputs.mpi == 'OpenMPI' }}"
        shell: bash
        run: |
          source /root/scripts/usefull_functions.sh
          use_openmpi

      - name: Get date
        shell: bash
        run: |
          echo "m_date=$(/bin/date -u '+%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Get cache for ccache tool
        uses: actions/cache@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ${{ inputs.cache_key_prefix }}-${{ env.m_date }}-${{ github.run_number }}
          restore-keys: ${{ inputs.cache_key_prefix }}-

      - name: Checkout framework
        uses: actions/checkout@v4
        with:
          path: ${{ env.SOURCE_DIR }}
          submodules: true

      - name: Disabling randomly selected packages
        if: ${{ inputs.with_rand_script }}
        shell: bash
        run: |
          chmod u+x ${{ env.SOURCE_DIR }}/.github/scripts/rand_pkg.sh
          MRAND=$(${{ env.SOURCE_DIR }}/.github/scripts/rand_pkg.sh)
          echo "$MRAND"
          echo "M_RAND=$MRAND" >> $GITHUB_ENV

      # TODO : Tag Ã  changer avant de merger !!!
      - name: Build and install framework
        uses: arcaneframework/gh_actions/build_install_framework@dev/ah-prepare-v2
        with:
          source_dir: ${{ env.SOURCE_DIR }}
          build_dir: ${{ env.BUILD_DIR }}
          install_dir: ${{ env.INSTALL_DIR }}
          log_dir: ${{ env.LOG_DIR }}
          cache_dir: ${{ env.CCACHE_DIR }}
          cmake_additionnal_args: '${{ env.CMAKE_ADD_ARGS }} ${{ inputs.cmake_additionnal_args }} ${{ env.M_RAND }}'
          verbose: ${{ inputs.verbose }}
          type_build: ${{ inputs.type_build }}
          compilo: ${{ inputs.compilo }}
          with_cuda: ${{ inputs.with_cuda }}
          with_samples: ${{ inputs.with_samples }}

      - name: Upload failure artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.cache_key_prefix }}-failure_config_build-artifact
          path: ${{ env.LOG_DIR }}
          retention-days: 7


      - name: Test
        if: ${{ inputs.execute_tests }}
        shell: bash
        run: |
          mkdir -p ${{ env.CT_RESULT_DIR }}
          ARCANE_CHECK=1 ctest --test-dir ${{ env.BUILD_DIR }} --output-junit ${{ env.CT_RESULT_DIR }}/results.xml ${{ env.CT_OPTS }} -E '${{inputs.excluded_tests}}' -LE '${{inputs.excluded_tests_with_labels}}'

      - name: Upload test artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.cache_key_prefix }}-test-artifact
          path: ${{ env.CT_RESULT_DIR }}
          retention-days: 7
