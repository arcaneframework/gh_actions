name: '[Split] Build, install and test Arcane Framework'

on:
  workflow_call:
    inputs:
      image:
        description: 'Docker image for the workflow'
        type: string
        required: true

      compilo:
        description: 'Compiler (GCC, CLang)'
        type: string
        required: false
        default: 'GCC'
      mpi:
        description: 'MPI (OpenMPI, MPICH)'
        type: string
        required: false
        default: 'OpenMPI'
      with_cuda:
        description: 'Compile with CUDA too ?'
        type: boolean
        required: false
        default: false
      type_build:
        description: 'Type of build (Debug, Check, Release)'
        type: string
        required: false
        default: 'Release'
      cmake_additionnal_args:
        description: 'Additionnal arguments for configure'
        type: string
        required: false
        default: ''
      verbose:
        description: 'Add verbose args for make/ninja'
        type: boolean
        required: false
        default: false
      with_samples:
        description: 'Compile samples too ?'
        type: boolean
        required: false
        default: true

      execute_tests:
        description: 'Execute tests ?'
        type: boolean
        required: false
        default: true
      excluded_tests:
        description: 'Regex with exclude tests'
        type: string
        required: false
        default: ''
      excluded_tests_with_labels:
        description: 'Labels of exclude tests'
        type: string
        required: false
        default: ''

      cache_key_prefix:
        description: 'Cache key prefix'
        type: string
        required: false
        default: 'split'

env:
  # CTest
  CT_OPTS: "--timeout 1200 --output-on-failure"

  # OpenMPI
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1


jobs:
  build-install-test:
    name: '[Split] Build, install and test Arcane Framework'
    runs-on: ubuntu-latest
    container:
      image: ${{inputs.image}}

    steps:
      - name: Define environment paths
        shell: bash
        run: |
          echo "SOURCE_DIR=${GITHUB_WORKSPACE}/framework" >> $GITHUB_ENV
          echo "BUILD_DIR=${GITHUB_WORKSPACE}/build" >> $GITHUB_ENV
          echo "INSTALL_DIR=${GITHUB_WORKSPACE}/install" >> $GITHUB_ENV
          echo "CCACHE_DIR=${GITHUB_WORKSPACE}/ccache" >> $GITHUB_ENV
          echo "LOG_DIR=${GITHUB_WORKSPACE}/log" >> $GITHUB_ENV
          echo "CT_RESULT_DIR=${GITHUB_WORKSPACE}/test" >> $GITHUB_ENV

      - name: Set MPICH as default MPI
        if: "${{ inputs.mpi == 'MPICH' }}"
        shell: bash
        run: |
          update-alternatives --set mpirun /usr/bin/mpirun.mpich
          update-alternatives --set mpi /usr/bin/mpicc.mpich
          update-alternatives --set h5pcc /usr/bin/h5pcc.mpich
          update-alternatives --set hdf5.pc /usr/lib/x86_64-linux-gnu/pkgconfig/hdf5-mpich.pc
          update-alternatives --set mpi-x86_64-linux-gnu /usr/include/x86_64-linux-gnu/mpich
          update-alternatives --set parmetis /usr/local/parmetis_mpich/include/parmetis.h
          mpirun --version

      - name: Add some args for MPI (Usefull with Ubuntu 22.04 + MPICH + CLang)
        shell: bash
        run: |
          echo "CMAKE_ADD_ARGS=${{ env.CMAKE_ADD_ARGS }} \
          -DMPI_SKIP_COMPILER_WRAPPER=TRUE \
          -DCMAKE_INCLUDE_PATH=/usr/include/x86_64-linux-gnu/mpi \
          -DMPI_C_LIB_NAMES=mpi \
          -DMPI_CXX_LIB_NAMES=mpi \
          -DMPI_mpi_LIBRARY=/usr/lib/x86_64-linux-gnu/libmpi.so \
          -DMPI_backtrace_LIBRARY=/usr/lib/x86_64-linux-gnu/libmpi.so \
          " >> $GITHUB_ENV

      - name: Get date
        shell: bash
        run: |
          echo "m_date=$(/bin/date -u '+%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Get cache for ccache tool
        uses: actions/cache@v3
        with:
          path: ${{env.CCACHE_DIR}}
          key: ${{ inputs.cache_key_prefix }}-${{ env.m_date }}-${{ github.run_number }}
          restore-keys: ${{ inputs.cache_key_prefix }}-

      - name: Checkout framework
        uses: actions/checkout@v3
        with:
          path: ${{ env.SOURCE_DIR }}
          submodules: true

      - name: Install Arccon
        uses: arcaneframework/gh_actions/split/install_arccon@v1.1.0
        with:
          source_dir: ${{ env.SOURCE_DIR }}/arccon
          build_dir: ${{ env.BUILD_DIR }}/arccon
          install_dir: ${{ env.INSTALL_DIR }}/arccon
          log_dir: ${{ env.LOG_DIR }}/arccon

      - name: Install ArcDependencies
        uses: arcaneframework/gh_actions/split/install_arcdependencies@v1.1.0
        with:
          source_dir: ${{ env.SOURCE_DIR }}/dependencies
          build_dir: ${{ env.BUILD_DIR }}/dependencies
          install_dir: ${{ env.INSTALL_DIR }}/dependencies
          log_dir: ${{ env.LOG_DIR }}/dependencies
          arccon_install_dir: ${{ env.INSTALL_DIR }}/arccon

      - name: Build and install AxlStar
        uses: arcaneframework/gh_actions/split/build_install_axlstar@v1.1.0
        with:
          source_dir: ${{ env.SOURCE_DIR }}/axlstar
          build_dir: ${{ env.BUILD_DIR }}/axlstar
          install_dir: ${{ env.INSTALL_DIR }}/axlstar
          log_dir: ${{ env.LOG_DIR }}/axlstar
          arccon_install_dir: ${{ env.INSTALL_DIR }}/arccon
          arcdependencies_install_dir: ${{ env.INSTALL_DIR }}/dependencies

      - name: Build and install Arccore
        uses: arcaneframework/gh_actions/split/build_install_arccore@v1.1.0
        with:
          source_dir: ${{ env.SOURCE_DIR }}/arccore
          build_dir: ${{ env.BUILD_DIR }}/arccore
          install_dir: ${{ env.INSTALL_DIR }}/arccore
          log_dir: ${{ env.LOG_DIR }}/arccore
          arccon_install_dir: ${{ env.INSTALL_DIR }}/arccon
          cache_dir: ${{ env.CCACHE_DIR }}
          cmake_additionnal_args: '${{ env.CMAKE_ADD_ARGS }} ${{ inputs.cmake_additionnal_args }}'
          verbose: ${{ inputs.verbose }}
          type_build: ${{ inputs.type_build }}
          compilo: ${{ inputs.compilo }}

      - name: Build and install Arcane
        uses: arcaneframework/gh_actions/split/build_install_arcane@v1.1.0
        with:
          source_dir: ${{ env.SOURCE_DIR }}/arcane
          build_dir: ${{ env.BUILD_DIR }}/arcane
          install_dir: ${{ env.INSTALL_DIR }}/arcane
          log_dir: ${{ env.LOG_DIR }}/arcane
          arccon_install_dir: ${{ env.INSTALL_DIR }}/arccon
          arcdependencies_install_dir: ${{ env.INSTALL_DIR }}/dependencies
          axlstar_install_dir: ${{ env.INSTALL_DIR }}/axlstar
          arccore_install_dir: ${{ env.INSTALL_DIR }}/arccore
          cache_dir: ${{ env.CCACHE_DIR }}
          cmake_additionnal_args: '${{ env.CMAKE_ADD_ARGS }} ${{ inputs.cmake_additionnal_args }}'
          verbose: ${{ inputs.verbose }}
          type_build: ${{ inputs.type_build }}
          compilo: ${{ inputs.compilo }}
          with_cuda: ${{ inputs.with_cuda }}
          with_samples: ${{ inputs.with_samples }}

      - name: Upload failure artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.cache_key_prefix }}-failure_config_build-artifact
          path: ${{ env.LOG_DIR }}
          retention-days: 7


      - name: Test Arccore
        if: ${{ inputs.execute_tests }}
        shell: bash
        run: |
          mkdir -p ${{ env.CT_RESULT_DIR }}
          ARCANE_CHECK=1 ctest --test-dir ${{ env.BUILD_DIR }}/arccore --output-junit ${{ env.CT_RESULT_DIR }}/results_arccore.xml ${{ env.CT_OPTS }} -E '${{inputs.excluded_tests}}' -LE '${{inputs.excluded_tests_with_labels}}'

      - name: Test Arcane
        if: ${{ inputs.execute_tests }}
        shell: bash
        run: |
          ARCANE_CHECK=1 ctest --test-dir ${{ env.BUILD_DIR }}/arcane --output-junit ${{ env.CT_RESULT_DIR }}/results_arcane.xml ${{ env.CT_OPTS }} -E '${{inputs.excluded_tests}}' -LE '${{inputs.excluded_tests_with_labels}}'

      - name: Upload test artifact
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ inputs.cache_key_prefix }}-test-artifact
          path: ${{ env.CT_RESULT_DIR }}
          retention-days: 7
